"""final project.ipynb
Automatically generated by Colaboratory.
"""
# Import modules
import os
import shutil
import numpy as np
import pandas as pd
pd.set_option('display.max_colwidth', None)
import matplotlib.pyplot as plt
import cv2
from skimage import color
from skimage import io
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, optimizers
from tensorflow.keras.models import Model, load_model, Sequential
# from tensorflow.keras.utils import plot_model
from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler
import tensorflow.keras.backend as K
from tensorflow.keras.layers import Conv2D, BatchNormalization, Activation, MaxPool2D, Conv2DTranspose, Concatenate, Input
from tensorflow.keras.applications import MobileNetV2, VGG19
import custom_functions as cf
import random
import glob
from IPython.display import clear_output
from PIL import Image
from google.colab import drive
import keras

## get data from Drive while working on Colab notebook

# drive.mount('/content/drive')
#
# !rm - r
# Dataset
# !cp / content / drive / MyDrive / Dataset.zip / content /
# !unzip
# Dataset.zip
# !rm
# Dataset.zip
# clear_output()


classify_image = '[Brain-Breast Classification .h5 model PATH]'

classify_brain_cancer = '[Brain Tumor classification .h5 model PATH]'
classify_breast_cancer = '[Breast Tumor classification .h5 model PATH]'

brain_seg_path = '[Brain tumor segmentation .h5 model PATH]'
breast_seg_path = "[Breast tumor segmentation .h5 model PATH]"


def create_dataframe(file_path):
    data = pd.DataFrame(columns=['image'])

    for path in glob.glob(os.path.join(file_path, '*mask*.png')):

        img_name = path.split('/')[-1].split('_')[0]
        img_path = os.path.join(file_path, img_name + '.png')

        if os.path.exists(img_path):
            data = data.append({'image': img_path, 'mask': path}, ignore_index=True)

    return data


"""## sample test"""

sample_image_brain = '/content/Dataset/Brain scans/Tumor/TEST/y701.jpg'
sample_image_brain_mask = '/content/Dataset/Brain scans/Tumor/TEST_masks/y701.png'
sample_image_breast = '/content/Dataset/Breast scans/malignant/Test/malignant (182).png'
sample_image_breast_mask = '/content/Dataset/Breast scans/malignant/Test/malignant (182)_mask.png'


class Prediction:
    def __init__(self, model_path, custom_objects=None):
        self.model = keras.models.load_model(model_path, custom_objects)

    def predict(self, path, img_shape=(256, 256)):
        # load
        img = cv2.imread(path, cv2.IMREAD_COLOR)
        img = cv2.resize(img, img_shape)
        img = img / 255

        img = np.expand_dims(img, axis=0)

        # predict
        return self.model.predict(img)

# Loading Models
custom_objects = {'dice_iou_loss': cf.dice_iou_loss, 'dice_coefficient': cf.dice_coefficient, 'iou': cf.iou}

classify_image_stage1 = Prediction(classify_image)

breast_classifier = Prediction(classify_breast_cancenr)
brain_classifier = Prediction(classify_brain_cancenr)

breast_segmentation = Prediction(breast_seg_path, custom_objects)

brain_segmentation = Prediction(brain_seg_path, custom_objects)


def get_predictions(image_path):
    is_breast = (classify_image_stadge1.predict(image_path) > 0.5).astype('bool').squeeze()

    if is_breast:

        print('The image is breast')

        res = breast_classifier.predict(image_path, (224, 224)).argmax(axis=1)

        print(res)

        if res == 2:
            print('Normal class الحمدلله')
            return None

        if res == 0:
            print("Benign")
        elif res == 1:
            print('malignant')

        return breast_segmentation.predict(image_path, (224, 224))

    else:

        print('The image contains brain')
        res = brain_classifier.predict(image_path) > 0.5

        if res:
            print('Not tumor الحمدلله')
            return None

        print('Tumor')
        return brain_segmentation.predict(image_path, (224, 224))


mask = np.round(get_predictions(sample_image_breast), 3)

mask = (mask > 0.99).astype('int')

if mask is not None:
    cf.visualize_segmentation(mask, sample_image_breast)

cf.visualization_comparison(mask, sample_image_breast_mask, sample_image_breast)

height, width = cf.calculate_mask_dimensions(mask)
print('height = ', height)
print('width = ', width)
